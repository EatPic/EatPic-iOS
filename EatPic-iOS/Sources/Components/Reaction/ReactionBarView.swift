//
//  ReactionBarView.swift
//  EatPic-iOS
//
//  Created by ÏõêÏ£ºÏó∞ on 7/15/25.
//

import SwiftUI

/// Î¶¨Ïï°ÏÖò ÌÉÄÏûÖ
enum ReactionType: String, CaseIterable, Identifiable {
    case thumbsUp, heart, yummy, strong, laugh
    
    var id: String { rawValue }
    
    var emoji: String {
        switch self {
        case .thumbsUp: return "üëçüèª"
        case .heart:    return "‚ù§Ô∏è"
        case .yummy:    return "üòã"
        case .strong:   return "üí™üèª"
        case .laugh:    return "ü§£"
        }
    }
}

/// - Parameters:
///   - selectedReaction: ÌòÑÏû¨ ÏÑ†ÌÉùÎêú Î¶¨Ïï°ÏÖò (ÌïòÎÇòÎßå ÏÑ†ÌÉù Í∞ÄÎä•, nilÏù¥Î©¥ ÏÑ†ÌÉù ÏóÜÏùå)
///   - reactionCounts: Í∞Å Î¶¨Ïï°ÏÖò ÌÉÄÏûÖÎ≥Ñ Í≥µÍ∞ê Ïàò (Int). 99Î•º Ï¥àÍ≥ºÌïòÎ©¥ "99+"Î°ú ÌëúÏãúÎê©ÎãàÎã§.
///   - onReactionSelected: Î¶¨Ïï°ÏÖòÏù¥ ÏÑ†ÌÉùÎêòÏóàÏùÑ Îïå Ìò∏Ï∂úÎêòÎäî ÏΩúÎ∞±

struct ReactionBarView: View {
    @Binding var selectedReaction: ReactionType?     // ÌòÑÏû¨ ÏÑ†ÌÉùÎêú Î¶¨Ïï°ÏÖò
    @Binding var reactionCounts: [ReactionType: Int] // Í∞Å Î¶¨Ïï°ÏÖò ÌÉÄÏûÖÎ≥Ñ Í≥µÍ∞ê Ïàò
    var onReactionSelected: (ReactionType?) -> Void // Î¶¨Ïï°ÏÖò ÏÑ†ÌÉù ÏΩúÎ∞±
    
    init(
            selectedReaction: Binding<ReactionType?>,
            reactionCounts: Binding<[ReactionType: Int]>,
            onReactionSelected: @escaping (ReactionType?) -> Void = { _ in }
        ) {
            self._selectedReaction = selectedReaction
            self._reactionCounts = reactionCounts
            self.onReactionSelected = onReactionSelected
        }
    
    var body: some View {
        HStack(spacing: 16) {
            ForEach(ReactionType.allCases) { reaction in
                Button {
                    toggleReaction(reaction)
                } label: {
                    VStack(spacing: 1) {
                        Text(reaction.emoji)
                            .font(.dsHeadline)
                        Text(countText(for: reaction))
                            .font(.dsCaption2)
                            .foregroundStyle(.white)
                    }
                }
                .padding(.horizontal, 10)
                .padding(.top, 6)
                .padding(.bottom, 3)
                .background(alignment: .center) {
                    Circle()
                        .fill(selectedReaction == reaction ?
                              Color.pink060 : Color.black.opacity(0.8))
                        .frame(width: 40, height: 40)
                }
            }
        }
        .frame(maxWidth: .infinity, maxHeight: 40)
        .padding(.horizontal, 48)
        .padding(.bottom, 16)
    }
    
    // Î¶¨Ïï°ÏÖò ÏÑ†ÌÉù/Ìï¥Ï†ú Ï≤òÎ¶¨
    private func toggleReaction(_ reaction: ReactionType) {
        print("=== ReactionBarView toggleReaction ===")
        print("ÏÑ†ÌÉùÎêú Î¶¨Ïï°ÏÖò: \(reaction)")
        print("ÌòÑÏû¨ selectedReaction: \(String(describing: selectedReaction))")
        
        let newReaction: ReactionType?
        
        if selectedReaction == reaction {
            // Í∞ôÏùÄ Î¶¨Ïï°ÏÖòÏùÑ Îã§Ïãú ÎàÑÎ•¥Î©¥ Ìï¥Ï†ú
            selectedReaction = nil
            reactionCounts[reaction, default: 1] -= 1
            newReaction = nil
            print("Î¶¨Ïï°ÏÖò Ìï¥Ï†úÎê®")
        } else {
            // Ïù¥Ï†Ñ Î¶¨Ïï°ÏÖòÏù¥ ÏûàÎã§Î©¥ Í∞êÏÜå
            if let previous = selectedReaction {
                reactionCounts[previous, default: 1] -= 1
                print("Ïù¥Ï†Ñ Î¶¨Ïï°ÏÖò \(previous) Í∞êÏÜå")
            }
            // ÏÉà Î¶¨Ïï°ÏÖò ÏÑ†ÌÉù
            selectedReaction = reaction
            reactionCounts[reaction, default: 0] += 1
            newReaction = reaction
            print("ÏÉà Î¶¨Ïï°ÏÖò \(reaction) ÏÑ†ÌÉùÎê®")
        }
        
        print("ÏóÖÎç∞Ïù¥Ìä∏Îêú reactionCounts: \(reactionCounts)")
                print("================================")
                
                // ÏΩúÎ∞± Ìò∏Ï∂ú
        onReactionSelected(newReaction)
    }
    
    // Í≥µÍ∞ê Ïàò ÌÖçÏä§Ìä∏ (99 Ïù¥ÏÉÅÏùÄ "99+")
    private func countText(for reaction: ReactionType) -> String {
        let count = reactionCounts[reaction, default: 0]
        return count > 99 ? "99+" : "\(count)"
    }
}

#Preview {
    CommunityMainView()
}

#Preview {
    @Previewable @State var selected: ReactionType?
    @Previewable @State var counts: [ReactionType: Int] = [
        .thumbsUp: 102,
        .heart: 98,
        .yummy: 32,
        .strong: 12,
        .laugh: 44
    ]
    
    return ReactionBarView(
        selectedReaction: $selected,
        reactionCounts: $counts
    )
}
